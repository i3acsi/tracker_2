server.port = 8084

#spring.hibernate.dialect=org.hibernate.dialect.PostgreSQLDialect
#spring.hibernate.connection.driver-class-name=org.postgresql.Driver
spring.datasource.url=${SPRING_DATASOURCE_URL:jdbc:postgresql://127.0.0.1:5432/tracker2}
spring.datasource.username=${SPRING_DATASOURCE_USERNAME:postgres}
spring.datasource.password=${SPRING_DATASOURCE_PASSWORD:password}

spring.thymeleaf.cache=false

spring.liquibase.change-log=classpath:liquibase/db.changelog-master.xml
spring.liquibase.enabled=false

spring.jpa.generate-ddl=false
#show-sql - показывать в логах sql который генерить hibernate
spring.jpa.show-sql=false
#ddl-auto - режим, в котором hibernate генерит БД
# - create -каждый раз при старте будет создана новая бд
# - validate - hibernate - проверяет корректность схемы и changelog
spring.jpa.hibernate.ddl-auto=validate
#

#JavaMailSender
spring.mail.host=smtp.gmail.com
spring.mail.port=587
spring.mail.username=gasevskyv@gmail.com
spring.mail.password=${mailPassword}
spring.mail.properties.mail.smtp.starttls.enable=true
#spring.mail.properties.mail.smtp.starttls.required=true
spring.mail.properties.mail.smtp.auth=true
mail.smtp.debug=true
spring.mail.protocol=smtp
#/

spring.security.oauth2.client.registration.google.client-id=809134870587-ku9ra5fsj32n3ush4lmrv53dpu5almk0.apps.googleusercontent.com
spring.security.oauth2.client.registration.google.client-secret=${clientSecret}

google.recaptcha.key.site=${recaptchaKEY}
google.recaptcha.key.secret=${recaptchaSECRET}

spring.session.jdbc.initialize-schema=always
spring.session.jdbc.table-name=SPRING_SESSION
